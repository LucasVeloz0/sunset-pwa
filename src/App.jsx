import React, { useState, useEffect, useRef } from 'react';
import * as SunCalc from 'suncalc';
import { getSunsetDirection, normalizeOrientation } from './utils/sunUtils';
import './App.css';


/**
 * Componente principal do aplicativo Guia Fotogr√°fico do P√¥r do Sol.
 * Gerencia:
 * - Geolocaliza√ß√£o do usu√°rio
 * - C√°lculo da dire√ß√£o do sol
 * - Orienta√ß√£o do dispositivo
 * - Controle de c√¢mera e captura de fotos
 * - Interface de b√∫ssola digital
 */

const App = () => {
  // Estados do aplicativo
  const [position, setPosition] = useState(null); // Armazena {lat, lng} do usu√°rio
  const [sunAzimuth, setSunAzimuth] = useState(0); // Dire√ß√£o do sol em graus (0-360)
  const [deviceHeading, setDeviceHeading] = useState(0); // Dire√ß√£o do dispositivo em graus (0-360)
  const [error, setError] = useState(null); // Mensagens de erro
  const [cameraActive, setCameraActive] = useState(false); // Controle de estado da c√¢mera
  const [photo, setPhoto] = useState(null); // URL da foto capturada
  const [facingMode, setFacingMode] = useState('environment'); // 'environment' (traseira) ou 'user' (frontal)

  // Refer√™ncias para elementos DOM
  const videoRef = useRef(null);
  const canvasRef = useRef(null);

  // ======================================================================
  // EFEITOS PARA INICIALIZA√á√ÉO E GERENCIAMENTO DE RECURSOS
  // ======================================================================

  /**
   * Efeito para obten√ß√£o da geolocaliza√ß√£o do usu√°rio.
   * Executa apenas uma vez na montagem do componente.
   */  
  useEffect(() => {
    const handleSuccess = (pos) => {
      setPosition({
        lat: pos.coords.latitude,
        lng: pos.coords.longitude
      });
    };

    const handleError = (err) => {
      setError(err.message || 'Erro ao obter localiza√ß√£o');
    };

    // Verifica suporte a geolocaliza√ß√£o
    if (!navigator.geolocation) {
      setError('Geolocaliza√ß√£o n√£o suportada');
      return;
    }

    // Solicita localiza√ß√£o com alta precis√£o
    navigator.geolocation.getCurrentPosition(handleSuccess, handleError, {
      enableHighAccuracy: true,
      timeout: 5000
    });
  }, []);

  /**
   * Efeito para c√°lculo da dire√ß√£o do sol.
   * Executa sempre que a posi√ß√£o do usu√°rio muda.
   */
  useEffect(() => {
    if (position) {
      // Calcula o azimute do p√¥r do sol usando a biblioteca SunCalc
      const azimuth = getSunsetDirection(position.lat, position.lng);
      setSunAzimuth(azimuth);
    }
  }, [position]);

  // 3. Configurar sensor de orienta√ß√£o
  useEffect(() => {
    const handleOrientation = (event) => {
      if (event.alpha !== null) {
        let alpha = event.alpha;
        if (typeof event.webkitCompassHeading !== 'undefined') {
          alpha = event.webkitCompassHeading;
        }
        setDeviceHeading(normalizeOrientation(alpha));
      }
    };

    if (window.DeviceOrientationEvent) {
      window.addEventListener('deviceorientation', handleOrientation, true);
    } else {
      setError('Sensor de orienta√ß√£o n√£o suportado neste dispositivo');
    }
    
    return () => {
      window.removeEventListener('deviceorientation', handleOrientation);
    };
  }, []);

  // 4. Controle da c√¢mera com useEffect
  useEffect(() => {
    let stream = null;
    
    const startCamera = async () => {
      try {
        if (videoRef.current && videoRef.current.srcObject) {
          return; // J√° est√° ativo
        }
        
        const constraints = {
          video: { 
            facingMode: facingMode,
            width: { ideal: 1280 },
            height: { ideal: 720 }
          }
        };

        stream = await navigator.mediaDevices.getUserMedia(constraints);
        
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          videoRef.current.onloadedmetadata = () => {
            videoRef.current.play().catch(err => {
              setError('Erro ao reproduzir v√≠deo: ' + err.message);
            });
          };
        }
      } catch (err) {
        setError('Erro ao acessar c√¢mera: ' + err.message);
        setCameraActive(false);
      }
    };

    if (cameraActive) {
      startCamera();
    }

    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    };
  }, [cameraActive, facingMode]);

  const toggleCamera = () => {
    setFacingMode(prev => prev === 'user' ? 'environment' : 'user');
  };

  const capturePhoto = () => {
    const video = videoRef.current;
    const canvas = canvasRef.current;
    
    if (video && canvas && video.readyState >= 2) {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const ctx = canvas.getContext('2d');
      
      if (facingMode === 'user') {
        ctx.translate(canvas.width, 0);
        ctx.scale(-1, 1);
      }
      
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      setPhoto(canvas.toDataURL('image/jpeg', 0.9));
    }
  };

  const closeCamera = () => {
    if (videoRef.current?.srcObject) {
      videoRef.current.srcObject.getTracks().forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
    setCameraActive(false);
    setPhoto(null);
  };

  // Efeito de limpeza global
  useEffect(() => {
    return () => {
      if (videoRef.current?.srcObject) {
        videoRef.current.srcObject.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  // 5. C√°lculos de dire√ß√£o
  const calculateRelativeAngle = () => {
    return (sunAzimuth - deviceHeading + 360) % 360;
  };

  const isAligned = Math.abs(calculateRelativeAngle()) < 5;

  return (
    <div className="app-container">
      <h1>üåÖ Amantes do P√¥r do Sol</h1>

      {cameraActive && (
        <div className="camera-container">
          <video
            ref={videoRef}
            className="camera-preview"
            playsInline
            muted
          />
          
          <div className="camera-controls">
            <button className="camera-btn flip-btn" onClick={toggleCamera}>
              üîÑ
            </button>
            <button className="camera-btn capture-btn" onClick={capturePhoto}>
              ‚≠ï
            </button>
            <button className="camera-btn close-btn" onClick={closeCamera}>
              ‚úñ
            </button>
          </div>

          {photo && (
            <div className="photo-preview">
              <img src={photo} alt="Foto capturada" />
              <a 
                href={photo} 
                download={`por-do-sol-${Date.now()}.jpg`}
                className="download-button"
              >
                ‚¨áÔ∏è Baixar
              </a>

                <button 
                 onClick={() => setPhoto(null)} 
                  className="close-button" >
                  ‚ùå Fechar
                 </button>
            </div>
          )}
        </div>
      )}

      {!cameraActive && (
        <button 
          className="main-camera-btn"
          onClick={() => setCameraActive(true)}
        >
          üì∏ Ativar C√¢mera
        </button>
      )}

      <div className="compass-wrapper">
        <div className="compass">
          <div 
            className="direction-arrow"
            style={{ transform: `rotate(${calculateRelativeAngle()}deg)` }}
          >
            <div className="sun-indicator">‚òÄÔ∏è</div>
          </div>
          <div className="alignment-marker"></div>
        </div>

        <div className="info-panel">
          <p>‚è± Hor√°rio do p√¥r do sol: {
            position && 
            new Date(SunCalc.getTimes(new Date(), position.lat, position.lng).sunset)
              .toLocaleTimeString()
          }</p>
          <p>üß≠ Dire√ß√£o: {sunAzimuth.toFixed(1)}¬∞</p>
          <div className={`alignment-feedback ${isAligned ? 'aligned' : ''}`}>
            {isAligned ? '‚≠ê ALINHADO! ‚≠ê' : 'Gire o dispositivo... ‚û°Ô∏è'}
          </div>
        </div>
      </div>

      {error && <div className="error-banner">{error}</div>}
      
      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </div>
  );
};

export default App;